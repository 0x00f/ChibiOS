/*
    ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
                 2011,2012,2013 Giovanni Di Sirio.

    This file is part of ChibiOS/RT.

    ChibiOS/RT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    ChibiOS/RT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @defgroup MIPS MIPS
 * @details MIPS port for the GCC compiler.
 *
 * @section MIPS_INTRO Introduction
 * 
 * The MIPS-GCC port supports the MIPS32r2 core in the following modes:
 * - <b>Pure MIPS32</b> mode, this is the preferred mode for code speed, this
 *   mode increases the memory footprint however. This mode is enabled when
 *   all the modules are compiled in MIPS mode, see the Makefiles.
 * .
 * @section MIPS_STATES Mapping of the System States in the MIPS port
 * The ChibiOS/RT logical system states are mapped as follow in the MIPS
 * port:
 * - <b>Init</b>. This state is represented by the startup code and the
 *   initialization code before @p chSysInit() is executed. It has not a
 *   special hardware state associated, usually the CPU goes through several
 *   hardware states during the startup phase.
 * - <b>Normal</b>. This is the state the system has after executing
 *   @p chSysInit(). In this state the CPU has all the interrupt sources
 *   enabled and is running in MIPS Kernel Mode.
 * - <b>Suspended</b>. In this state the IRQ sources are disabled,
 *   the core is running in MIPS Kernel Mode.
 * - <b>Disabled</b>. The IRQ sources are disabled, the core is
 *   running in MIPS Kernel Mode.
 * - <b>Sleep</b>. MIPS cores does not have an explicit built-in low power
 *   mode but there are clock stop modes implemented in custom ways by the
 *   various silicon vendors. This state is implemented in each microcontroller
 *   support code in a different way, the core is entering MIPS native low power
 *   mode with IRQ sources enabled in MIPS Kernel Mode.
 * - <b>S-Locked</b>. IRQ sources disabled, core running in MIPS Kernel Mode.
 * - <b>I-Locked</b>. IRQ sources disabled, core running in MIPS Kernel Mode. Note
 *   that this state is not different from the SRI state in this port, the
 *   @p chSysLockI() and @p chSysUnlockI() APIs do nothing (still use them in
 *   order to formally change state because this may change).
 * - <b>Serving Regular Interrupt</b>. IRQ sources disabled, core running in
 *   MIPS Exception Mode. See also the I-Locked state.
 * - <b>Serving Non-Maskable Interrupt</b>. The NMI is not handled in this port.
 * - <b>Halted</b>. Implemented as an infinite loop after disabling all IRQ
 *   sources. The MIPS state is whatever the processor was running when
 *   @p chSysHalt() was invoked.
 * .
 * @section MIPS_NOTES The MIPS port notes
 * The MIPS7/9 port is organized as follow:
 * - The @p main() function is invoked in kernel mode.
 * - Each thread has a private user/system stack, the system has a single
 *   interrupt stack where all the interrupts are processed.
 * - The threads are started in kernel mode.
 * - Interrupts nesting is not supported in the MIPS port because their
 *   implementation, even if possible, is not really efficient in this
 *   architecture.
 * .
 * @section MIPS_IH MIPS Interrupt Handlers
 * In the current implementation the MIPS Interrupt handlers prepare correct
 * C environment so no need to do any preparation before runnning ISR.
 * However system macros @p CH_IRQ_PROLOGUE() and @p CH_IRQ_EPILOGUE() should
 * be used to ensure system integrity, even the do nothing.
 * This may be changed once priority/vector interrupt handling is implemented.<br>
 * MIPS core has six hardware interrupt lines, thereby low level code assumes that
 * CH_IRQ_HANDLER macro is used with appropriate definition token listed in mipsparams.h
 * In most cases SoC has some kind of EIC(External Interrupt Controller) to extend
 * amount of interrupt sources which is wired to one of the MIPS hw interrupt lines.
 * Example:
 * @code
 * CH_IRQ_HANDLER(MIPS_HW_IRQ0) {
 *   CH_IRQ_PROLOGUE();
 *
 *   dispatch_pic_irq();
 *
 *   CH_IRQ_EPILOGUE();
 * }
 * @endcode
 * The interrupt handler that uses CH_IRQ_HANDLER macro should not declare
 * itself as static. It should be globally visible.<br>
 * @ingroup gcc
 */

/**
 * @defgroup MIPS_CONF Configuration Options
 * @details MIPS specific configuration options. The MIPS port allows some
 * architecture-specific configurations settings that can be overridden by
 * redefining them in @p chconf.h. Usually there is no need to change the
 * default values.
 * - @p INT_REQUIRED_STACK, this value represent the amount of stack space used
 *   by an interrupt handler between the @p extctx and @p intctx
 *   structures.<br>
 *   In practice this value is the stack space used by the chSchDoReschedule()
 *   stack frame.<br>
 *   This value can be affected by a variety of external things like compiler
 *   version, compiler options, kernel settings (speed/size) and so on.<br>
 *   The default for this value is @p 0x40 which should be a safe value for two
 *   nested calls which use MIPS stack frame. You can trim this down by defining
 *   the macro externally. This would save some valuable RAM space for each thread
 *   present in the system.<br>
 *   The default value is set into <b>./os/ports/GCC/MIPS/chcore.h</b>.
 * - @p IDLE_THREAD_STACK_SIZE, stack area size to be assigned to the IDLE
 *   thread. Usually there is no need to change this value unless inserting
 *   code in the IDLE thread using the @p IDLE_LOOP_HOOK hook macro.
 * - @p MIPS_EXC_STACK_SIZE, stack area size to be assigned to the exception
 *   context. There is no default value and should be defined per board.
 * - @p MIPS_MAIN_STACK_SIZE, stack area size to be assigned to the main()
 *   thread. There is no default value and should be defined per board.
 * - @p MIPS_TIMER_FREQ, frequency of MIPS core timer. This is CPU
 *   implementation dependent. Usually it is half of CPU frequency.
 * - @p MIPS_CPU_ICACHE_LINE_SIZE, size of the instruction cache line.
 * - @p MIPS_CPU_ICACHE_SIZE, size of the instruction cache.
 * - @p MIPS_CPU_DCACHE_LINE_SIZE, size of the data cache line.
 * - @p MIPS_CPU_DCACHE_SIZE, size of the data cache.
 * - @p MIPS_ENABLE_WFI_IDLE, if set to @p TRUE enables the use of the
 *   an implementation-specific clock stop mode from within the idle loop.
 *   This option is defaulted to TRUE.
 * .
 * @ingroup MIPS
 */

/**
 * @defgroup MIPS_CORE Core Port Implementation
 * @details MIPS specific port code, structures and macros.
 *
 * @ingroup MIPS
 */

/**
 * @defgroup MIPS_STARTUP Startup Support
 * @details MIPS startup code support.
 *
 * @section MIPS_STARTUP_1 Startup Process
 * The startup process, as implemented, is the following:
 * -# The MIPS state is switched to Kernel with all IRQ sources
 *    disabled.
 * -# BSS segment is initialized.
 * -# An early initialization routine @p port_early_init is invoked.
 *    At this step basic CPU configuration is applied, initialized caches,
 *    system timer and unmasked HW IRQ sources registered with CH_IRQ_HANDLER.
 * -# The @p main() function is invoked.
 * -# Should the @p main() function return the code executes a warm boot procedure.
 *    Note that data section is already modified during the system execution thereby
      this is not safe.
 * @section MIPS_STARTUP_2 Expected linker symbols
 * The startup code starts at the symbol @p _start and expects the
 * following symbols to be defined in the linker script:
 * - @p __rom_data_start__ start location of .data in ROM.
 * - @p __ram_data_start__ start location of .data in RAM for relocation from ROM.
 * - @p __ram_data_end__   end location of .data in RAM for relocation from ROM.
 * - @p __bss_start__      start location of .bss.
 * - @p __bss_end__        end location of .bss.
 * .
 * @note if .data section is already in RAM no relocation is performed(i.e. in case chibi was loaded by external loader)
 * in this case __rom_data_start__ and __ram_data_start__ should point to the same location
 * @ingroup MIPS
 */

/**
 * @defgroup MIPS_SPECIFIC Specific Implementations
 * @details Platform-specific port code.
 *
 * @ingroup MIPS
 */
